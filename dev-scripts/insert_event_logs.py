from collections import namedtuple
from datetime import datetime, timedelta
import itertools
import random

import psycopg2
from psycopg2.extras import execute_values

from canonical.landscape.model.eventlog.entities import LogEntityType

NUM_ROWS = 10_000_000
BATCH_SIZE = 100_000

DB = "landscape-test-account-1"
USER = "landscape"
PASSWORD = "landscape"
HOST = "localhost"

TIME_DELTA_SECONDS = 60 * 60 * 24 * 365  # Allow one year of variation
ENTITY_TYPES = list(LogEntityType.log_entity_type_to_id.values())
ENTITY_IDS = list(range(1000))
PERSON_NAMES = [
    "Alex",
    "Andy",
    "Avery",
    "Bailey",
    "Blake",
    "Cameron",
    "Casey",
    "Charlie",
    "Chris",
    "Dakota",
    "Drew",
    "Elliot",
    "Emerson",
    "Emery",
    "Finley",
    "Frankie",
    "Harley",
    "Hayden",
    "Hunter",
    "Jamie",
    "Jay",
    "Jesse",
    "Jordan",
    "Jules",
    "Kai",
    "Kendall",
    "Kit",
    "Lane",
    "Logan",
    "Max",
    "Morgan",
    "Nico",
    "Noel",
    "Parker",
    "Pat",
    "Phoenix",
    "Quinn",
    "Riley",
    "River",
    "Robin",
    "Rowan",
    "Ryan",
    "Sage",
    "Sam",
    "Shay",
    "Sky",
    "Toby",
    "Tyler",
    "Wren",
    "Zion",
]

PERSON_RECORDS = [(i + 1, name) for i, name in enumerate(PERSON_NAMES)]


ANIMALS = [
    "aardvark",
    "alpaca",
    "antelope",
    "armadillo",
    "baboon",
    "badger",
    "bat",
    "bear",
    "beaver",
    "bee",
    "bison",
    "boar",
    "buffalo",
    "bull",
    "bunny",
    "butterfly",
    "camel",
    "caribou",
    "cat",
    "chameleon",
    "cheetah",
    "chicken",
    "chimpanzee",
    "chipmunk",
    "cobra",
    "cougar",
    "cow",
    "coyote",
    "crab",
    "crane",
    "crocodile",
    "crow",
    "deer",
    "dingo",
    "dog",
    "dolphin",
    "donkey",
    "dove",
    "dragonfly",
    "duck",
    "eagle",
    "eel",
    "elephant",
    "elk",
    "emu",
    "falcon",
    "ferret",
    "finch",
    "fish",
    "flamingo",
    "fox",
    "frog",
    "gazelle",
    "giraffe",
    "goat",
    "goose",
    "gorilla",
    "grasshopper",
    "hamster",
    "hare",
    "hawk",
    "hedgehog",
    "heron",
    "hippo",
    "horse",
    "hummingbird",
    "hyena",
    "ibis",
    "iguana",
    "jackal",
    "jaguar",
    "jay",
    "jellyfish",
    "kangaroo",
    "kingfisher",
    "koala",
    "lemur",
    "leopard",
    "lion",
    "lizard",
    "llama",
    "lobster",
    "lynx",
    "macaw",
    "magpie",
    "manatee",
    "mandrill",
    "meerkat",
    "mole",
    "monkey",
    "moose",
    "mouse",
    "narwhal",
    "newt",
    "octopus",
    "opossum",
    "orangutan",
    "ostrich",
    "otter",
    "owl",
]


ADJECTIVES = [
    "adorable",
    "adventurous",
    "agile",
    "alert",
    "amazing",
    "angelic",
    "animated",
    "artful",
    "bouncy",
    "brave",
    "bubbly",
    "bright",
    "calm",
    "caring",
    "cheeky",
    "cheerful",
    "clever",
    "clumsy",
    "cuddly",
    "curious",
    "daring",
    "dazzling",
    "delightful",
    "devoted",
    "dizzy",
    "dreamy",
    "eager",
    "earnest",
    "easygoing",
    "elegant",
    "energetic",
    "excited",
    "fancy",
    "fearless",
    "feisty",
    "fierce",
    "fluffy",
    "fluttery",
    "forgiving",
    "friendly",
    "funny",
    "fuzzy",
    "gentle",
    "gigantic",
    "giggly",
    "glowing",
    "goofy",
    "graceful",
    "happy",
    "hasty",
    "helpful",
    "hilarious",
    "honest",
    "hopeful",
    "huggy",
    "hungry",
    "inquisitive",
    "intrepid",
    "jittery",
    "jolly",
    "joyful",
    "jumpy",
    "kind",
    "kooky",
    "lively",
    "loyal",
    "lucky",
    "magical",
    "mellow",
    "merry",
    "mighty",
    "mini",
    "mischievous",
    "modest",
    "mushy",
    "mysterious",
    "nifty",
    "nimble",
    "noisy",
    "nurturing",
    "peppy",
    "perky",
    "playful",
    "plucky",
    "poised",
    "precious",
    "quirky",
    "quick",
    "quiet",
    "radiant",
    "rare",
    "reliable",
    "romantic",
    "rosy",
    "sassy",
    "shiny",
    "sleepy",
    "snuggly",
    "spunky",
    "sunny",
]


ENTITY_NAMES = [
    f"{adj}-{animal}" for adj, animal in itertools.product(ADJECTIVES, ANIMALS)
]

LOG_MESSAGES = [
    "User login successful",
    "User logout completed",
    "Password reset requested",
    "Failed login attempt",
    "File upload started",
    "File upload completed",
    "Data synchronization initiated",
    "Data synchronization failed",
    "New user registration",
    "User profile updated",
    "Permission denied for resource access",
    "Session timed out",
    "Database connection established",
    "Database connection lost",
    "Cache cleared",
    "Configuration updated",
    "Email notification sent",
    "Email delivery failed",
    "Payment processed successfully",
    "Payment failed due to insufficient funds",
    "Order placed",
    "Order cancelled",
    "System reboot initiated",
    "System reboot completed",
    "Service started",
    "Service stopped",
    "Backup started",
    "Backup completed",
    "Backup failed",
    "API request received",
    "API response sent",
    "Unauthorized API access attempt",
    "User password changed",
    "Security scan completed",
    "Security vulnerability detected",
    "Resource created",
    "Resource deleted",
    "Resource updated",
    "Job scheduled",
    "Job executed",
    "Job failed",
    "Cache miss",
    "Cache hit",
    "Configuration rollback",
    "License key validated",
    "License key expired",
    "Disk space low warning",
    "Memory usage high warning",
    "CPU load normal",
    "CPU load high",
    "Service degraded",
]


EventLogEntry = namedtuple(
    "EventLogEntry",
    [
        "account_id",
        "creation_time",
        "person_id",
        "person_name",
        "entity_type",
        "entity_name",
        "entity_id",
        "message",
    ],
)


def generate_row(i):
    person_id, person_name = random.choice(PERSON_RECORDS)
    creation_time_offset = timedelta(seconds=random.randint(0, TIME_DELTA_SECONDS))
    event_log_entry = EventLogEntry(
        account_id=random.randint(1, 5),
        creation_time=datetime.now() - creation_time_offset,
        person_id=person_id,
        person_name=person_name,
        entity_type=random.choice(ENTITY_TYPES),
        entity_name=random.choice(ENTITY_NAMES),
        entity_id=random.choice(ENTITY_IDS),
        message=random.choice(LOG_MESSAGES),
    )
    return event_log_entry


def insert_rows(num_rows, batch_size):
    for start in range(0, NUM_ROWS, BATCH_SIZE):
        batch = [
            tuple(generate_row(i))
            for i in range(start, min(start + BATCH_SIZE, NUM_ROWS))
        ]
        execute_values(
            cursor,
            """
            INSERT INTO event_log_entry (
                account_id,
                creation_time,
                person_id,
                person_name,
                entity_type,
                entity_name,
                entity_id,
                message
            ) VALUES %s
        """,
            batch,
            page_size=batch_size,
        )
        print(f"Inserted {cursor.rowcount} rows...")


if __name__ == "__main__":
    conn = psycopg2.connect(f"dbname={DB} user={USER} password={PASSWORD} host={HOST}")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM event_log_entry")
    insert_rows(num_rows=NUM_ROWS, batch_size=BATCH_SIZE)
    conn.commit()
